# Remove macOS system files and hidden directories from current directory
dot_clean() {
	find . -name ".DS_Store" -delete 2>/dev/null
	find . -name ".Spotlight-V100" -delete 2>/dev/null
	find . -name ".Trashes" -delete 2>/dev/null
	find . -name ".Trash-*" -delete 2>/dev/null
	find . -name "Thumbs.db" -delete 2>/dev/null
	find . -name "Desktop.ini" -delete 2>/dev/null

	local count
	count=$(find . \( -name ".DS_Store" -o -name ".Spotlight-V100" -o -name ".Trashes" -o -name ".Trash-*" -o -name "Thumbs.db" -o -name "Desktop.ini" \) | wc -l | tr -d ' ')
	echo "Processed $count item$(optional_s "$count")"
}

# Get the current git branch name
git_current_branch() {
	git branch --show-current
}

# Get the default branch name from remote origin
git_default_branch() {
	git remote show origin | sed -n '/HEAD branch/s/.*: //p'
}

# Remove git branches that have been merged into the default branch
git_prune_branches() {
	local default_branch
	default_branch=$(git_default_branch)

	local merged_branches
	merged_branches=$(git branch --merged "$default_branch" | grep -v "\* $default_branch" | grep -v "^  $default_branch$")

	if [ -z "$merged_branches" ]; then
		echo "No merged branches to prune"
		return
	fi

	echo "$merged_branches" > /tmp/branches_to_delete
	"${EDITOR:-vim}" /tmp/branches_to_delete

	while IFS= read -r branch; do
		if [ -n "$branch" ]; then
			git branch -d "$(echo "$branch" | xargs)"
		fi
	done < /tmp/branches_to_delete

	rm /tmp/branches_to_delete
}

# Check if current shell session is over SSH
is_ssh() {
	[ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]
}

# Create directory and change into it
mkcdir() {
	mkdir -p "$1" && cd "$1"
}

# Add 's' suffix for pluralization when count is not 1
optional_s() {
	[ "$1" -ne 1 ] && echo "s"
}

# Alternative git branch pruning using helix editor
prune_git_branches() {
	local default_branch
	default_branch=$(git_default_branch)

	local merged_branches
	merged_branches=$(git branch --merged "$default_branch" | grep -v "\* $default_branch" | grep -v "^  $default_branch$")

	if [ -z "$merged_branches" ]; then
		echo "No merged branches to prune"
		return
	fi

	echo "$merged_branches" > /tmp/branches_to_delete
	hx /tmp/branches_to_delete

	while IFS= read -r branch; do
		if [ -n "$branch" ]; then
			git branch -d "$(echo "$branch" | xargs)"
		fi
	done < /tmp/branches_to_delete

	rm /tmp/branches_to_delete
}

# Create file with any necessary parent directories
mktouch() {
	mkdir -p "$(dirname "$1")" && touch "$1"
}

# Get the year a file was first added to git repository
file_addition_year() {
	git log --follow --format=%ad --date=format:%Y "$1" | tail -1
}
